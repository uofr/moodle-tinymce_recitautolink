define("tiny_recitautolink/wrapper", ["exports", "editor_tiny/options"], (function(_exports, _options) {
    Object.defineProperty(_exports, "__esModule", {
        value: !0
    }), _exports.Editor = void 0;
    _exports.Editor = class {
        constructor() {
            var obj, key, value;
            value = {
                popup: null
            }, (key = "globalVars") in(obj = this) ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : obj[key] = value
        }
        open(editor) {
            if (null === this.globalVars.popup || this.globalVars.popup.closed) {
                var that = this,
                    url = M.cfg.wwwroot;
                url += "/admin/tool/htmlbootstrapeditor/view.php", this.globalVars.popup = window.open(url, "HTML Bootstrap Editor", "scrollbars=1"), this.globalVars.popup.IWrapper = M.recit.htmlbootstrapeditor.IWrapper, this.globalVars.popup.IWrapper.uploadFile = function(filename, binFile, cb) {
                    let fileTransferData = that.getFileTransferData(),
                        xhr = new XMLHttpRequest;
                        xhr.onreadystatechange = () => {        
                            if (xhr.readyState === 4) {
                                if (xhr.status === 200) {
                                    let result = JSON.parse(xhr.responseText);
                                    if (result) {
                                        if (result.error) {
                                            console.log(result);
                                            return;
                                        }
            
                                        let file = result;
                                        if (result.event && result.event === 'fileexists') {
                                            // A file with this name is already in use here - rename to avoid conflict.
                                            // Chances are, it's a different image (stored in a different folder on the user's computer).
                                            // If the user wants to reuse an existing image, they can copy/paste it within the editor.
                                            file = result.newfile;
                                        }
            
                                        cb(file);
                                    }
                                } else {
                                    alert("server error");
                                }
                            }
                        }; 
                    let formData = new FormData;
                    formData.append("repo_upload_file", binFile), formData.append("itemid", fileTransferData.itemid), formData.append("env", fileTransferData.env), formData.append("repo_id", fileTransferData.repo_id), formData.append("sesskey", M.cfg.sesskey), formData.append("client_id", fileTransferData.client_id), formData.append("savepath", "/"), formData.append("ctx_id", M.cfg.contextid), formData.append("license", fileTransferData.license), formData.append("author", fileTransferData.author);
                    let tmp = filename.split(".");
                    filename = [tmp[0] || "", tmp[1] || ""], formData.append("title", "".concat(filename[0].substr(0, 255), ".").concat(filename[1])), xhr.open("POST", M.cfg.wwwroot + "/repository/repository_ajax.php?action=upload", !0), xhr.send(formData)
                }, this.globalVars.popup.IWrapper.get_string = function(str) {
                    return "undefined" == typeof M ? str : M.util.get_string(str, "tool_htmlbootstrapeditor")
                }, this.getFileTransferData = function() {
                    const options = (0, _options.getFilePicker)(editor, "media");
                    var result = {
                        repo_id: 0
                    };
                    result.client_id = options.client_id || 0, result.env = options.env || "", result.license = options.defaultlicense || "", result.itemid = options.itemid || 0, result.author = options.author || "";
                    var attr = "";
                    for (attr in options.repositories)
                        if ("upload" === options.repositories[attr].type) {
                            result.repo_id = options.repositories[attr].id;
                            break
                        } for (attr in options.licenses)
                        if ("cc" === options.licenses[attr].shortname) {
                            result.license = options.licenses[attr].shortname;
                            break
                        } return result
                }, this.globalVars.popup.IWrapper.getContent = function() {
                    return editor.getContent()
                }, this.globalVars.popup.IWrapper.setContent = function(htmlStr) {
                    editor.execCommand("mceSetContent", !1, htmlStr), that.globalVars.popup.close()
                }
            } else this.globalVars.popup.focus()
        }
    }
}));
